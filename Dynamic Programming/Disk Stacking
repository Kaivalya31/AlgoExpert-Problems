You're given a non-empty array of arrays where each subarray holds three integers and represents a disk. These integers denote each disk's width, depth, and height, respectively.
Your goal is to stack up the disks and to maximize the total height of the stack. A disk must have a strictly smaller width, depth, and height than any other disk below it.Write
a function that returns an array of the disks in the final stack, starting with the top disk and ending with the bottom disk. Note that you can't rotate disks; in other words, 
the integers in each subarray must represent [width, depth, height] at all times. You can assume that there will only be one stack with the greatest total height.
Sample Input
disks = [[2, 1, 2], [3, 2, 3], [2, 2, [[2, 1, 2], [3, 2, 3], [4, 4, 5]]

Sample Output
[[2, 1, 2], [3, 2, 3], [4, 4, 5]]
// 10 (2 + 3 + 5) is the tallest heigh
// stacking disks following the rules 


#include <vector>
using namespace std;

vector<vector<int>> build_sequence(vector<vector<int>> &disks, 
																	 vector<int> &sequences, int current_idx)
{
	vector<vector<int>> sequence;
	while(current_idx != INT_MIN)
	{
		sequence.insert(sequence.begin(), disks[current_idx]);
		current_idx = sequences[current_idx];
	}
	
	return sequence;
}

vector<vector<int>> diskStacking(vector<vector<int>> disks) {
  sort(disks.begin(), disks.end(), 
			[](vector<int> &a, vector<int> &b) {return a[2] < b[2];} );
	
	vector<int> heights;
	for(int i=0; i<disks.size(); i++)
		heights.push_back(disks[i][2]);
	
	vector<int> sequences(disks.size(), INT_MIN);
	int max_height_idx = 0;
	
	for(int i=1; i<disks.size(); i++)
	{
		vector<int> cur_disk = disks[i];
		
		for(int j=0; j<i; j++)
		{
			vector<int> other_disk = disks[j];
			if(other_disk[0] < cur_disk[0] && other_disk[1] < cur_disk[1]
				&& other_disk[2] < cur_disk[2])
			{
				if(heights[i] <= cur_disk[2] + heights[j])
				{
					heights[i] = cur_disk[2] + heights[j];
					sequences[i] = j;
				}
			}
		}
		
		if(heights[i] >= heights[max_height_idx])
			max_height_idx = i;
	}
	
	return build_sequence(disks, sequences, max_height_idx);
}
