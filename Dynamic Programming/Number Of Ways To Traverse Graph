You're given two positive integers representing the width and height of a grid-shaped, rectangular graph. Write a function that returns the number of ways to reach the bottom
right corner of the graph when starting at the top left corner. Each move you take must either go down or right. In other words, you can never move up or left in the graph. 
For example, given the graph illustrated below, with width = 2 and height = 3 , there are three ways to reach the bottom right corner when starting at the top left corner:
Note: you may assume that width * height >= 2 . In other words, the graph will never be a 1x1 grid. 

Sample Input
 _ _
|_|_|
|_|_|
|_|_|
1. Down, Down, Right
2. Right, Down, Down
3. Down, Right, Down

Sample Output
3

import java.util.*;

class Program {

  public int numberOfWaysToTraverseGraph(int width, int height) {
    int t[][] = new int[height][width];
		//Ways to get to a target cell in first column.
		for(int i=0; i<height; i++)
			t[i][0] = 1;
		
		//Ways to get to a target cell in first row.
		for(int i=0; i<width; i++)
			t[0][i] = 1;
		
		for(int i=1; i<height; i++)
		{
			for(int j=1; j<width; j++)
				t[i][j] = t[i-1][j] + t[i][j-1];
		}
		
		return t[height-1][width-1];
  }
}
