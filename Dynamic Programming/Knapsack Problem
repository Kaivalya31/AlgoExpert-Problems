#include <vector>
#include <algorithm>
using namespace std;
vector<vector<int>> finalKS(vector<vector<int>> items, 
													 vector<vector<int>> ksValues, int weight);

vector<vector<int>> knapsackProblem(vector<vector<int>> items, int capacity) {
  vector<vector<int>> ksValues(items.size() + 1, vector<int> (capacity+1, 0));
	for(int i=1; i < items.size()+1; i++)
	{
		int curVal = items[i-1][0];
		int curWt = items[i-1][1];
		for(int j=0; j < capacity+1; j++)
		{
			if(curWt > j)
				ksValues[i][j] = ksValues[i-1][j];
			else
			{
				ksValues[i][j] = max(ksValues[i-1][j], ksValues[i-1][j-curWt]+curVal);
			}
		}
		
	}
  return finalKS(items, ksValues, ksValues[items.size()][capacity]);
}

vector<vector<int>> finalKS(vector<vector<int>> items, 
													 vector<vector<int>> ksValues, int weight)
{
	vector<vector<int>> res = {{}, {}};
	res[0].push_back(weight);
	int i = ksValues.size() - 1;
	int j = ksValues[0].size() - 1;
	while(i > 0)
	{
		if(j == 0)
			break;
		
		if(ksValues[i][j] == ksValues[i-1][j])
			i--;
		
		else
		{
			res[1].insert(res[1].begin(), i-1);
			j -= items[i-1][1];
			i--;
		}
	}
	
	return res;
}
