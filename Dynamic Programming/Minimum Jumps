You're given a non-empty array of positive integers where each integer represents the maximum number of steps you can take forward in the array. For example, if the
element at index 1 is 3 , you can go from index 1 to index 2 , 3 , or 4 . Write a function that returns the minimum number of jumps needed to reach the final index.
Note that jumping from index i to index
i + x always constitutes one jump, no
matter how large x is.
Sample Input
array = [3, 4, 2, 1, 2, 3, 7, 1, 1, 1, 3]
Sample Output
4 // 3 --> (4 or 2) --> (2 or 3) --> 7

Solution 1: O(n^2) time | O(n) space
#include <vector>
using namespace std;

int minNumberOfJumps(vector<int> array) {
  if(array.size() == 1 && array[0] > 0)
		return 0;
	
	vector<int> jumps(array.size(), INT_MAX);
	jumps[0] = 0;
	
	for(int i=1; i<array.size(); i++)
	{
		for(int j=0; j<i; j++)
		{
			if(j + array[j] >= i)
				jumps[i] = min(jumps[i], jumps[j]+1);
		}
	}
	
	return jumps[array.size()-1];
}


Solution 2: O(n) time | O(1) space
#include <vector>
using namespace std;

int minNumberOfJumps(vector<int> array) {
  if(array.size() == 1 && array[0] > 0)
		return 0;
	
	int max_reach = array[0], steps = array[0], jumps = 0;
	for(int i=1; i<array.size(); i++)
	{
		if(i == array.size() - 1)
			return jumps+1;
		
		max_reach = max(max_reach, array[i]+i);
		steps--;
		 if(steps == 0)
		 {
			 jumps++;
			 steps = max_reach - i;
		 }
	}
	
	return jumps;
}
