Write a function that takes in a big string and an array of small strings, all of which are smaller in length than the big string. The function should return an array of 
booleans, where each boolean represents whether the small string at that index in the array of small strings is contained in the big string. 
Sample Input #1
bigString = "this is a big string"
smallStrings = ["this", "yo", "is", "a", "bigger", "string", "kappa"]
Sample Output #1
[true, false, true, true, false, true, false]

Sample Input #2
bigString: "abcdefghijklmnopqrstuvwxyz",
smallStrings: ["abc", "mnopqr", "wyz", "no", "e", "tuuv"]
Sample Output #2
[true, true, false, true, true, false]

Solution 1: 
import java.util.*;

class Program {
  public static List<Boolean> multiStringSearch(String bigString, String[] smallStrings) {
    ArrayList<Boolean> res = new ArrayList<Boolean>();
		for(var smallString : smallStrings)
		res.add(bigString.contains(smallString));
		
    return res;
  }
}

Note: If you are not allowed to use a built-in function to straightaway solve the problem.
Solution 2:
import java.util.*;

class Program {
  public static List<Boolean> multiStringSearch(String bigString, String[] smallStrings) {
    Trie trie = new Trie();
		for(var smallString : smallStrings)
			trie.insert(smallString);
		
		Set<String> containedStrings = new HashSet<String>();
		int n = bigString.length();
		for(int i=0; i<n; i++)
			findSmallString(bigString, i, trie, containedStrings);
		
		List<Boolean> res = new ArrayList<>();
		for(var str : smallStrings)
			res.add(containedStrings.contains(str));
		
		return res;
  }
	
	
	private static void findSmallString(String str, int start, Trie trie,
																		 Set<String> containedStrings)
	{
		TrieNode curNode = trie.root;
		int n = str.length();
		for(int i=start; i<n; i++)
		{
			char curLetter = str.charAt(i);
			if(!curNode.children.containsKey(curLetter))
				break;
			
			curNode = curNode.children.get(curLetter);
			if(curNode.children.containsKey(trie.endSymbol))
				containedStrings.add(curNode.word);
		}
		
		return;
	}
	
	
	private static class TrieNode
	{
		Map<Character, TrieNode> children = new HashMap<Character, TrieNode>();
		String word;
	}
	
	private static class Trie
	{
		TrieNode root = new TrieNode();
		char endSymbol = '/';
		
		public void insert(String str)
		{
			TrieNode node = root;
			int n = str.length();
			for(int i=0; i<n; i++)
			{
				char letter = str.charAt(i);
				if(!node.children.containsKey(letter))
				{
					TrieNode newNode = new TrieNode();
					node.children.put(letter, newNode);
				}
				
				node = node.children.get(letter);
			}
			
			node.children.put(endSymbol, null);
			node.word = str;
		}
	}
}
