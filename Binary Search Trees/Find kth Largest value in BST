Write a function that takes in a Binary Search Tree (BST) and a positive integer k and returns the kth largest integer contained in the BST.
You can assume that there will only be integer values in the BST and that k is less than or equal to the number of nodes in the tree.
Also, for the purpose of this question, duplicate integers will be treated as distinct values. In other words, the second largest value 
in a BST containing values {5, 7, 7} will be 7 â€”not 5 . Each BST node has an integer value , a left child node, and a right child node. 
A node is said to be a valid BST node if and only if it satisfies the BST property: its value is strictly greater than the values of every 
node to its left; its value is less than or equal to the values of every node to its right; and its children nodes are either valid BST nodes
themselves or None / null .

#include<stack>
using namespace std;

// This is an input class. Do not edit.
class BST {
public:
  int value;
  BST *left = nullptr;
  BST *right = nullptr;

  BST(int value) { this->value = value; }
};

struct Tree_info
{
	int no_of_nodes_visited;
	int value_of_last_visited_node;
};

void inorder_in_reverse(BST *tree, int k, Tree_info &TI)
{
if(!tree || TI.no_of_nodes_visited >= k)
return;

inorder_in_reverse(tree -> right, k, TI);
if(tree && TI.no_of_nodes_visited < k)
{
	TI.no_of_nodes_visited++;
	TI.value_of_last_visited_node = tree -> value;
	/*If there are no no right children, but we haven't visited k nodes.
	so we can't tell the kth largest node value.*/
	inorder_in_reverse(tree -> left, k, TI);
}
}

int findKthLargestValueInBst(BST *tree, int k) {
	Tree_info TI = Tree_info{0, -1};
	inorder_in_reverse(tree, k, TI);
	return TI.value_of_last_visited_node;
}

