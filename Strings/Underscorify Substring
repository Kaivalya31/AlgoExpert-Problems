Write a function that takes in two strings: a main string and a potential substring of the main string. The function should return a version of the main string with every 
instance of the substring in it wrapped between underscores. If two or more instances of the substring in the main string overlap each other or sit side by side, the 
underscores relevant to these substrings should only appear on the far left of the leftmost substring and on the far right of the rightmost substring. If the main string
doesn't contain the other string at all, the function should return the main string intact.
Sample Input
string = "testthis is a testtest to se
substring = "test"
Sample Output
"_test_this is a _testtest_ to see if _


def underscorifySubstring(string, substring):
    locations = contract(get_locations(string, substring))
	return underscorify(string, locations)

def get_locations(string, substring):
	locations = []
	i = 0
	while i<len(string):
		next_i = string.find(substring, i)
		if next_i != -1:
			locations.append([next_i, next_i + len(substring)])
			i = next_i + 1
		else:
			break
	return locations

def contract(locations):
	if not len(locations):
		return locations
	
	new_locations = [locations[0]]
	prev = new_locations[0]
	
	for i in range(1, len(locations)):
		cur = locations[i]
		if cur[0] <= prev[1]:
			prev[1] = cur[1]
		else:
			new_locations.append(cur)
			prev = cur
	return new_locations


def underscorify(string, locations):
	l = 0
	s = 0
	in_between = False
	res = []
	i = 0
	
	while s < len(string) and l < len(locations):
		if s == locations[l][i]:
			res.append("_")
			in_between = not in_between
			if not in_between:
				l += 1
			i = 0 if i==1 else 1
		res.append(string[s])
		s += 1
	
	if l < len(locations):
		res.append("_")
	elif s < len(string):
		res.append(string[s:])
	return "".join(res)

