using namespace std;

class Node {
public:
  int value;
  Node *prev;
  Node *next;

  Node(int value);
};

// Feel free to add new properties and methods to the class.
class DoublyLinkedList {
public:
  Node *head;
  Node *tail;

  DoublyLinkedList() {
    head = NULL;
    tail = NULL;
  }

  void setHead(Node *node) {
    if(!head)
		{
			head = node;
			tail = node;
			return;
		}
		
		insertBefore(head, node);
  }

  void setTail(Node *node) {
    if(!tail)
		{
			setHead(node);
			return;
		}
		insertAfter(tail, node);
  }

  void insertBefore(Node *node, Node *nodeToInsert) {
    if(nodeToInsert == head && nodeToInsert == tail)
			return;
		
		remove(nodeToInsert);
		nodeToInsert -> next = node;
		nodeToInsert -> prev = node -> prev;
		if(!(node->prev))
			head = nodeToInsert;
		else
			node -> prev -> next = nodeToInsert;

		node -> prev = nodeToInsert;
  }

  void insertAfter(Node *node, Node *nodeToInsert) {
   if(head == nodeToInsert && nodeToInsert == tail)
			return;
		
		remove(nodeToInsert);
		nodeToInsert -> prev = node;
		nodeToInsert -> next = node -> next;
		if(!(node -> next))
			tail = nodeToInsert;
		else
			node -> next -> prev = nodeToInsert;
		
		node -> next = nodeToInsert;
  }

  void insertAtPosition(int position, Node *nodeToInsert) {
    if(position == 1)
		{
			setHead(nodeToInsert);
			return;
		}
		Node *temp = head;
		int cp = 1;
		while(temp && cp++ != position)
			temp = temp -> next;
		if(temp)
			insertBefore(temp, nodeToInsert);
		else
			setTail(nodeToInsert);
  }

  void removeNodesWithValue(int value) {
    Node *temp = head;
		Node *to_remove = NULL;
		while(temp)
		{
			to_remove = temp;
			temp = temp -> next;
			if(to_remove -> value == value)
				remove(to_remove);
		}
  }

  void remove(Node *node) {
		if(node == head)
			head = head -> next;
		if(node == tail)
			tail = tail -> prev;
		
		removeNodeInBw(node);
  }

  bool containsNodeWithValue(int value) {
    Node *temp = head;
		while(temp && temp -> value != value)
			temp = temp -> next;
    return temp != NULL;
  }
	
	void removeNodeInBw(Node *node)
	{
		if(node -> prev)
			node -> prev -> next = node -> next;
		if(node -> next)
			node -> next -> prev = node -> prev;
		
		node -> next = NULL;
		node -> prev = NULL;
	}
};
