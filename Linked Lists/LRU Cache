Implement an LRUCache class for a Least Recently Used (LRU) cache. The class should support:
Inserting key-value pairs with the insertKeyValuePair method.
Retrieving a key's value with the getValueFromKey method.
Retrieving the most recently used (the most recently inserted or
retrieved) key with the getMostRecentKey method.
Each of these methods should run in constant time.
Additionally, the LRUCache class should store a maxSize property set to the size of the cache, which is passed in as an argument during instantiation. This size represents 
the maximum number of key-value pairs that the cache can store at once. If a key-value pair is inserted in the cache when it has reached maximum capacity, the least recently 
used key-value pair should be evicted from the cache and no longer retrievable; the newly added key-value pair should effectively replace it. Note that inserting a key-value 
pair with an already existing key should simply replace the key's value in the cache with the new value and shouldn't evict a key-value pair if the cache is full. Lastly, 
attempting to retrieve a value from a key that isn't in the cache should return None / null .

import java.util.*;

// Do not edit the class below except for the insertKeyValuePair,
// getValueFromKey, and getMostRecentKey methods. Feel free
// to add new properties and methods to the class.
class Program {
  static class LRUCache {
    int maxSize;
		int cur_size = 0;
		DLL MostRecentPages = new DLL();
		Map<String, DLLNode> cache = new HashMap<String, DLLNode>();

    public LRUCache(int maxSize) {
      this.maxSize = maxSize > 1 ? maxSize : 1;
    }

    public void insertKeyValuePair(String key, int value) {
      if(!cache.containsKey(key))
			{
				if(cur_size == maxSize)
				{
					String keyToRemove = MostRecentPages.tail.key;
				  MostRecentPages.removeTail();
				  cache.remove(keyToRemove);
				}
				
				else
					cur_size++;
				
				cache.put(key, new DLLNode(key, value));
			}
			
			else
				cache.get(key).value = value;
			
			MostRecentPages.setHead(cache.get(key));
    }

    public LRUResult getValueFromKey(String key) {
      if(!cache.containsKey(key))
				return new LRUResult(false, -1);
			
			MostRecentPages.setHead(cache.get(key));
			return new LRUResult(true, cache.get(key).value);
    }

    public String getMostRecentKey() {
      if(MostRecentPages.head == null)
      return "";
			
			return MostRecentPages.head.key;
    }
  }
	
	static class DLLNode
	{
		String key;
		int value;
		DLLNode prev = null, next = null;
		
		public DLLNode(String key, int value)
		{
			this.key = key;
			this.value = value;
		}
		
		public void removeBindings()
		{
			if(prev != null)
				prev.next = next;
			
			if(next != null)
				next.prev = prev;
			
			prev = null;
			next = null;
		}
	}
	
	static class DLL
	{
		DLLNode head = null, tail = null;
		
		public void setHead(DLLNode node)
		{
			if(head == node)
				return;
			
		  else if(head == null)
			{
				head = node;
				tail = node;
			}
			
			else if(head == tail)
			{
				tail.prev = node;
				head = node;
				head.next = tail;
			}
			
			else
			{
				if(tail == node)
					removeTail();
				
				node.removeBindings();
				head.prev = node;
				node.next = head;
				head = node;
			}
		}
		
		public void removeTail()
		{
			if(tail == null)
				return;
			
			if(tail == head)
			{
				head = null;
				tail = null;
				return;
			}
			
			tail = tail.prev;
			tail.next = null;
		}
	}

  static class LRUResult {
    boolean found;
    int value;

    public LRUResult(boolean found, int value) {
      this.found = found;
      this.value = value;
    }
  }
}

