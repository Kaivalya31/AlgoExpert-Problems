You're given a two-dimensional array (a
matrix) of potentially unequal height and
width containing only 0 s and 1 s. Each 0
represents land, and each 1 represents part
of a river. A river consists of any number of 1
s that are either horizontally or vertically
adjacent (but not diagonally adjacent). The
number of adjacent 1 s forming a river
determine its size.
Note that a river can twist. In other words, it
doesn't have to be a straight vertical line or a
straight horizontal line; it can be L-shaped, for
example.
Write a function that returns an array of the
sizes of all rivers represented in the input
matrix. The sizes don't need to be in any
particular order.

#include <vector>
using namespace std;
void traverse_node(int i, int j, vector<vector<int>> &matrix, vector<vector<int>> &visited, vector<int> &res);
void get_unvisited(int i, int j, vector<vector<int>> &matrix, vector<vector<int>> &visited, vector<vector<int>> &unvisited);

vector<int> riverSizes(vector<vector<int>> matrix) {
  vector<int> res{};
	vector<vector<int>> visited(matrix.size(), vector<int>(matrix[0].size(), false));
	
	for(int i=0; i<matrix.size(); i++)
	{
	  for(int j=0; j<matrix[i].size(); j++)
		{
		   if(visited[i][j])
			 continue;
			 
			 traverse_node(i, j, matrix, visited, res);
		}
	}
	
	return res;
}


void traverse_node(int i, int j, vector<vector<int>> &matrix, 
                    vector<vector<int>> &visited, vector<int> &res)
{
  int cur_size = 0;
	vector<vector<int>> nodes_to_visit{{i, j}};
	
	while(!nodes_to_visit.empty())
	{
	  vector<int> cur_node = nodes_to_visit.back();
		nodes_to_visit.pop_back();
		i = cur_node[0], j = cur_node[1];
		
		if(visited[i][j])
		continue;
		
		visited[i][j] = true;
		
		if(matrix[i][j] == 0)
		continue;
		
		cur_size++;
		
		vector<vector<int>> unvisited;
		get_unvisited(i, j, matrix, visited, unvisited);
		for(vector<int> ele : unvisited)
		nodes_to_visit.push_back(ele);
	}
	
	if(cur_size > 0)
	res.push_back(cur_size);
}

void get_unvisited(int i, int j, vector<vector<int>> &matrix, 
                                 vector<vector<int>> &visited, vector<vector<int>> &unvisited)
{
  if(i > 0 && !visited[i-1][j])
	unvisited.push_back({i-1, j});
	
	if(i < matrix.size()-1 && !visited[i+1][j])
	unvisited.push_back({i+1, j});
	
	if(j > 0 && !visited[i][j-1])
	unvisited.push_back({i, j-1});
	
	if(j < matrix[0].size()-1 && !visited[i][j+1])
	unvisited.push_back({i, j+1});
}
