You're given an array of integers where each
integer represents a jump of its value in the
array. For instance, the integer 2 represents a
jump of two indices forward in the array; the
integer -3 represents a jump of three indices
backward in the array.
If a jump goes past the array's bounds, it wraps
over to the other side. For instance, a jump of
-1 at index 0 brings us to the last index in
the array. Similarly, a jump of 1 at the last
index in the array brings us to index 0 .
Write a function that returns a boolean
representing whether the jumps in the array
form a single cycle. A single cycle occurs if,
starting at any index in the array and following
the jumps, every element in the array is visited
exactly once before landing back on the starting
index.

#include<map>
using namespace std;

bool hasSingleCycle(vector<int> array) {
  int ele_visited = 0;
	int cur_idx = 0;
	while(ele_visited < array.size())
	{
	   if(ele_visited > 0 && cur_idx == 0)
		 return false;
		 
		 ele_visited++;
		 cur_idx = (cur_idx + array[cur_idx])%(int)(array.size());
		 cur_idx = cur_idx >= 0? cur_idx: cur_idx + array.size();
	}
	
	return cur_idx == 0;
}
