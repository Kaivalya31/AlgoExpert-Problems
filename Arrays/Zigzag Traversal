Write a function that takes in an n x m twodimensional array (that can be square-shaped
when n == m) and returns a one-dimensional
array of all the array's elements in zigzag order.
Zigzag order starts at the top left corner of the
two-dimensional array, goes down by one
element, and proceeds in a zigzag pattern all
the way to the bottom right corner.
Sample Input
array = [
 [1, 3, 4, 10],
 [2, 5, 9, 11],
 [6, 8, 12, 15],
 [7, 13, 14, 16],
]
Sample Output
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]

#include <vector>

using namespace std;
bool is_out_of_bounds(int r, int c, int h, int w)
{
  return r < 0 ||	r > h || c < 0 || c > w;
}

vector<int> zigzagTraverse(vector<vector<int>> array) {
  if(array.empty())
  return {};
	
	vector<int> res{};
	int h = array.size()-1, w = array[0].size()-1, r = 0, c = 0;
  bool down = true;
	
	while(!is_out_of_bounds(r, c, h, w))
	{
		res.push_back(array[r][c]);
		if(down)
		{
			if(c == 0 || r == h)
			{
				down = false;
				if(r == h)
					c++;
				else
					r++;
			}
			
			else
			{
				r++, c--;
			}
		}
			
			else 
			{
				if(r == 0 || c == w)
			{
				down = true;
				if(c == w)
					r++;
				else
					c++;
			}
			
			else
			{
				r--, c++;
			}
		}
	}
	
	return res;
}
