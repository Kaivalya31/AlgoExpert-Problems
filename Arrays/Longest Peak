Write a function that takes in an array of integers and returns the length of the longest peak in the array. A peak is defined as adjacent integers in the array that are 
strictly increasing until they reach a tip (the highest value in the peak), at which point they become strictly decreasing. At least three integers are required to form a
peak. 
For example, the integers 1, 4, 10, 2 form a peak, but the integers 4, 0, 10 don't and neither do the integers 1, 2, 2, 0 . Similarly, the integers 1, 2, 3 don't form a peak
because there aren't any strictly decreasing integers after the 3.
Sample Input
array = [1, 2, 3, 3, 4, 0, 10, 6, 5, -1, -3, 2, 3]
Sample Output
6 // 0, 10, 6, 5, -1, -3

using namespace std;

int longestPeak(vector<int> array) {
	int len = 0, n = array.size();
	int i = 1;
	while(i < n-1)
	{
		bool peak_found = array[i-1] < array[i] && array[i] > array[i+1];
		if(!peak_found)
		{
			i++; 
		  continue;
		}
		
		int l_idx = i - 2;
		while(l_idx >= 0 && array[l_idx] < array[l_idx + 1])
		 l_idx--; 
		
		int r_idx = i + 2;
		while(r_idx < array.size() && array[r_idx] < array[r_idx-1])
			r_idx++; 
		
		int cur_len = r_idx - l_idx - 1;
		len = cur_len > len? cur_len : len;
		i = r_idx;
}
	
	return len;
}
