Write a function that takes in a Binary Tree and returns its diameter. The diameter of a binary tree is defined as the length of its longest path, even if that path doesn't 
pass through the root of the tree. A path is a collection of connected nodes in a tree, where no node is connected to more than two other nodes. The length of a path is the 
number of edges between the path's first node and its last node. Each BinaryTree node has an integer value , a left child node, and a right child node. Children nodes can 
either be BinaryTree nodes themselves or None / null .
Sample Input
tree = 
  1
 / \
 3 2
 / \
 7 4
 / \
 8 5
 / \
 9 6
Sample Output
6 // 9 -> 8 -> 7 -> 3 -> 4 -> 5 -> 6
// There are 6 edges between the
// first node and the last node
// of this tree's longest path.
 Diameter is nothing but the longest path in the tree.

using namespace std;

// This is an input class. Do not edit.
class BinaryTree {
public:
  int value;
  BinaryTree *left;
  BinaryTree *right;

  BinaryTree(int value) {
    this->value = value;
    left = NULL;
    right = NULL;
  }
};

class Util_Class
{
public:
   int diameter, height;
   Util_Class(int diameter, int height)
	 {
	   this -> diameter = diameter;
		 this -> height = height;
	 }
};

Util_Class *Tree_Info(BinaryTree *tree);

int binaryTreeDiameter(BinaryTree *tree) {
  return Tree_Info(tree) -> diameter;
}


Util_Class *Tree_Info(BinaryTree *tree)
{
   if(!tree)
	 return new Util_Class(0, 0);
	 
	 Util_Class *left_tree_info = Tree_Info(tree -> left);
   Util_Class *right_tree_info = Tree_Info(tree -> right);
   
	 int longest_path_via_root = left_tree_info -> height + right_tree_info -> height;
	 int max_dia_so_far = max(left_tree_info -> diameter, right_tree_info -> diameter);
	 int curr_dia = max(longest_path_via_root, max_dia_so_far);
	 int curr_height = 1 + max(left_tree_info -> height, right_tree_info -> height);
	 
	 return new Util_Class(curr_dia, curr_height);
} 
