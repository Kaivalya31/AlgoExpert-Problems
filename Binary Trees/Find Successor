Write a function that takes in a Binary Tree (where nodes have an additional pointer to their parent node) as well as a node contained in that tree and returns the 
given node's successor. A node's successor is the next node to be visited (immediately after the given node) when traversing its tree using the in-order tree-traversal 
technique. A node has no successor if it's the last node to be visited in the in-order traversal. If a node has no successor, your function should return None / null .
Each BinaryTree node has an integer value , a parent node, a left child node, and a right child node. Children nodes can either be BinaryTree nodes themselves or None / null .

using namespace std;

// This is an input class. Do not edit.
class BinaryTree {
public:
  int value;
  BinaryTree *left = nullptr;
  BinaryTree *right = nullptr;
  BinaryTree *parent = nullptr;

  BinaryTree(int value) { this->value = value; }
};

BinaryTree *leftmost_child(BinaryTree *node)
{
   while(node -> left)
	 node = node -> left;
	 
	 return node;
}

BinaryTree *rightmost_parent(BinaryTree *node)
{
   while(node -> parent && node -> parent -> right == node)
	 node = node -> parent;
	 
	 return node -> parent;
}

BinaryTree *findSuccessor(BinaryTree *tree, BinaryTree *node) {
  if(node -> right)
  return leftmost_child(node -> right);
	
	return rightmost_parent(node);
}

