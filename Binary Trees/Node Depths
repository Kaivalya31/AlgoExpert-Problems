The distance between a node in a Binary Tree and the tree's root is called the node's depth.
Write a function that takes in a Binary Tree and returns the sum of its nodes' depths. Each 
BinaryTree node has an integer value , a left child node, and a right child node. Children
nodes can either be BinaryTree nodes themselves or None / null .
Sample Input
tree = 1
 / \
 2 3
 / \ / \
 4 5 6 7
 / \
8 9
Sample Output
Hints
16
// The depth of the node with value 2
// The depth of the node with value 3
// The depth of the node with value 4
// The depth of the node with value 5
// Etc..
// Summing all of these depths yields 


Solution 1:
using namespace std;

class BinaryTree {
public:
  int value;
  BinaryTree *left;
  BinaryTree *right;

  BinaryTree(int value) {
    this->value = value;
    left = NULL;
    right = NULL;
  }
};

int nodeDepths(BinaryTree *root, int d = 0) {
  if(!root)
  return 0;
	return d + nodeDepths(root -> left, d+1) + nodeDepths(root -> right, d+1);
}


Solution 2:
#include <stack>
using namespace std;

class BinaryTree {
public:
  int value;
  BinaryTree *left;
  BinaryTree *right;

  BinaryTree(int value) {
    this->value = value;
    left = nullptr;
    right = nullptr;
  }
};

struct level
{
  BinaryTree *node;
	int depth;
};

int nodeDepths(BinaryTree *root) {
  int sum_of_depths = 0;
	
	stack<level> s;
	s.push({root, 0});
	
	while(!s.empty())
	{
		level n = s.top();
		s.pop();
		
		if(!(n.node))
			continue;
	
		sum_of_depths += n.depth;
		s.push({(n.node) -> left, n.depth+1});
		s.push({(n.node) -> right, n.depth+1});
	}
	
	return sum_of_depths;
}

