Write a function that takes in a Binary Tree, transforms it into a Right Sibling Tree, and returns its root. A Right Sibling Tree is obtained by making every node in a Binary 
Tree have its right property point to its right sibling instead of its right child. A node's right sibling is the node immediately to its right on the same level or None / null 
if there is no node immediately to its right. Note that once the transformation is complete, some nodes might no longer have a node pointing to them. For example, in the sample
output below, the node with value 10 no longer has any inbound pointers and is effectively unreachable. The transformation should be done in place, meaning that the original 
data structure should be mutated (no new structure should be created). Each BinaryTree node has an integer value , a left child node, and a right child node. Children nodes can 
either be BinaryTree nodes themselves or None / null .

Solution
#include <vector>
using namespace std;

// This is the class of the input root. Do not edit it.
class BinaryTree {
public:
  int value;
  BinaryTree *left = nullptr;
  BinaryTree *right = nullptr;

  BinaryTree(int value);
};

void alter_tree(BinaryTree *node, BinaryTree *parent, bool is_left_child)
{
	if(!node)
		return;
	
  //Keeping track of origonal left and right children of current node.
	BinaryTree *left = node -> left, *right = node -> right;
	alter_tree(left, node, true);
	
  //For root of the tree.
	if(!parent)
		node -> right = nullptr;
    
	else if(is_left_child)
		node -> right = parent -> right;
    
	else
	{
		if(!parent -> right)
			node -> right = nullptr;
		else
			node -> right = parent -> right -> left;
	}
	
	alter_tree(right, node, false);
}

BinaryTree *rightSiblingTree(BinaryTree *root) {
  alter_tree(root, nullptr, false);
  return root;
}

