Write a function that takes in a Binary Tree (where nodes have an additional pointer to their parent node) and traverses it iteratively using the in-order tree-traversal 
technique; the traversal should specifically not use recursion. As the tree is being traversed, a callback function passed in as an argument to the main function should be 
called on each node (i.e., callback(currentNode) ). Each BinaryTree node has an integer value , a parent node, a left child node, and a right child node. Children nodes can 
either be BinaryTree nodes themselves or None / null .
Sample Input
tree = 1
 / \
 2 3
 / / \
 4 6 7
 \
 9
callback = someCallback
Sample Output
// The input callback will have been c
callback(4)
callback(9)
callback(2)
callback(1)
callback(6)
callback(3)
callback(7)


#include <vector>
using namespace std;

class BinaryTree {
public:
  int value;
  BinaryTree *left;
  BinaryTree *right;
  BinaryTree *parent;

  BinaryTree(int value, BinaryTree *parent = nullptr);
  void insert(vector<int> values, int i = 0);
};



void iterativeInOrderTraversal(BinaryTree *tree,
                               void (*callback)(BinaryTree *tree)) {
  BinaryTree *cur_node = tree, *prev_node = nullptr;
	
	while(cur_node)
	{
		BinaryTree *next_node;
		if(!prev_node || prev_node == cur_node -> parent)
		{
			if(cur_node -> left)
				next_node = cur_node -> left;
			else
			{
				(*callback)(cur_node);
				next_node = cur_node -> right? cur_node -> right:
				                               cur_node -> parent;
			}
		}
		
		else if(prev_node == cur_node -> left)
		{
			(*callback)(cur_node);
			next_node = cur_node -> right? cur_node -> right:
			                               cur_node -> parent;
		}
		else
			next_node = cur_node -> parent;
		
		prev_node = cur_node;
		cur_node = next_node;
	}
}
