Write a function that takes in an array of integers and returns an array of the same length, where each element in the output array corresponds to the number of integers in 
the input array that are to the right of the relevant index and that are strictly smaller than the integer at that index. In other words, the value at output[i] represents 
the number of integers that are to the right of i and that are strictly smaller than input[i] . 
Sample Input
array = [8, 5, 11, -1, 3, 4, 2]
Sample Output
[5, 4, 4, 0, 1, 1, 0]
// There are 5 integers smaller than 8
// There are 4 integers smaller than 5
// There are 4 integers smaller than 1
// Etc..


using namespace std;

class SpecialBST
{
	public:
	int value, left_subtree_size;
	SpecialBST *left, *right;
	
	SpecialBST(int value)
	{
		this -> value = value;
		left_subtree_size = 0;
		left = right = nullptr;
	}
	
	void insert(int value, int idx, vector<int> &res,
						 int smalls_at_insertion = 0)
	{
		if(value < this -> value)
		{
			left_subtree_size++;
			if(!left)
			{
				left = new SpecialBST(value);
				res[idx] = smalls_at_insertion;
			}
			else
				left -> insert(value, idx, res, smalls_at_insertion);
		}
		
		else
		{
			smalls_at_insertion += left_subtree_size;
			if(value > this -> value)
				smalls_at_insertion++;
			
			if(!right)
			{
				right = new SpecialBST(value);
				res[idx] = smalls_at_insertion;
			}
			else
				right -> insert(value, idx, res, smalls_at_insertion);
		}
	}
};

vector<int> rightSmallerThan(vector<int> array) {
  if(array.size() == 0)
		return {};
	
	int last_idx = array.size() - 1;
	SpecialBST *root = new SpecialBST(array[last_idx]);
	vector<int> res(array.size(), 0);
	
	//Traversing from right to left as we've tocount numbers 
	//smaller than a number towards its RIGHT.
	for(int i=last_idx-1; i>=0; i--)
		  root -> insert(array[i], i, res);
	
	return res;
}

